{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Gun.js","webpack:///./src/Settings.js","webpack:///./src/Tank.js","webpack:///./src/utils/mapIndicator.js","webpack:///./src/Battlefield.js","webpack:///./src/views/BattlefieldView.js","webpack:///./src/utils/helpers.js","webpack:///./src/Controllers/BattlefieldController.js","webpack:///./src/server/Server.js","webpack:///./src/server/Connection.js","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Gun","damage","bullets","this","min","max","shoot","Math","random","round","Settings","gun","hp","Tank","settings","config","fire","INDICATORS","empty","tank","mount","bullet","Battlefield","width","height","createArea","addMountains","console","log","coordinates","setInterval","updateBulletPosition","row","Array","fill","mountCount","x","floor","y","item","mountains","id","tanks","isTankOnCoord","updateBattlefieldCoordinates","ready","destroyMount","undefined","isPointOnArea","oldCoordinates","newCoordinates","indicator","filter","changeBulletCoordinates","direction","BattlefieldViews","document","querySelector","rootDiv","createElement","classList","add","rowDiv","section","createSection","appendChild","body","dataset","type","content","playerId","id$","getElementById","removeAttribute","remove","tank$","throttle","callback","time","isOpen","setTimeout","arguments","BattlefieldController","battlefield","onKeyDown","initBattlefieldView","player","addPlayer","updatePlayer","updateTankPosition","eventListener","battlefieldView","init","update","e","code","control","UP","moveTop","DOWN","moveDown","LEFT","moveLeft","RIGHT","moveRight","FIRE","addEventListener","setTankPosition","updateConfig","addBullet","Server","Promise","resolve","reject","ceil","Connection","serverConnect","requestFieldSize","tank1","tank2","connection","areaSize","whatIsThisSize","then","size","_size","positionY","positionX_1","positionX_2","controls1","controls2","battlefieldViews","catch","error"],"mappings":"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","file":"js/app.3a118bfb.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Tanks/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export class Gun {\r\n\r\n    constructor (damage, bullets) {\r\n        this.damage = damage;\r\n        this.bullets = bullets;\r\n    }\r\n    get fire () {\r\n        const [ min, max ] = this.damage;\r\n        const shoot = Math.random() * (max - min) + min;\r\n        return Math.round(shoot); \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","export class Settings {\r\n        tank_1 = {\r\n            gun: {\r\n                random: [15, 45],\r\n                bullets: 5,            \r\n            },\r\n            hp: 120,\r\n        };\r\n        tank_2 = {\r\n            gun: {\r\n                random: [13, 38],\r\n                bullets: 6,            \r\n            },\r\n            hp: 130,\r\n        }\r\n    constructor () {\r\n    }\r\n}\r\n\r\n","import { Gun }  from \"./Gun\";\r\nimport { Settings } from \"./Settings\";\r\n// import { Bullet } from \"./Bullet\";\r\n\r\nexport class Tank {\r\n    constructor (name){\r\n        this.name = name;\r\n        this.settings = new Settings(name)\r\n    }\r\n    get healh (){\r\n        return this.settings[this.name].hp;\r\n    }   \r\n    get fire (){\r\n        const config = this.settings[this.name];\r\n        this.gun = new Gun(config.gun.random, config.gun.bullets);\r\n        return this.gun.fire;\r\n    }\r\n    get bullets () {\r\n        return this.settings[this.name].gun.bullets;\r\n    }\r\n     \r\n}\r\n\r\n\r\n\r\n\r\n","export const INDICATORS = {\r\n    empty: ' ',\r\n    tank: 'T',\r\n    mount: 'M',\r\n    bullet: 'B',\r\n}   ","// coordinates = [\r\n//   ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],\r\n//   ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],\r\n//   ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],\r\n//   ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],\r\n//   ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],\r\n//   ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],\r\n//   ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],\r\n//   ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],\r\n//   ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],\r\n// ]; пример того, как выглядит поле координат\r\nimport { INDICATORS } from \"./utils/mapIndicator\";\r\nexport class Battlefield {\r\n  /*  \r\n      класс Battlefield для создания поля боя\r\n      tanks - массив item-ов для отрисовки на карте включает в себя танк, координаты и id\r\n      mountains - массив гор для отрисовки на карте\r\n      coordinates - массив c координатной сеткой (массив массивов)\r\n      в конструктор передаем размеры поля (по-умолчанию 8х8)\r\n      вызываем метод создания поля createArea, куда передаем высоту и ширину поля\r\n      вызываем метод создания и расстановки Гор addMountains, куда передаем высоту и ширину поля\r\n  */\r\n  tanks = [];\r\n  bullets = [];\r\n  mountains = [];\r\n  coordinates = [];\r\n  constructor(width = 8, height = 8) {\r\n    this.createArea(width, height);\r\n    this.addMountains(width, height);\r\n    console.log(this.coordinates)\r\n    setInterval(() => {\r\n      this.updateBulletPosition();\r\n    },150)\r\n  }\r\n  createArea(width, height) {\r\n    /*\r\n      метод создания поля боя, куда передаем размеры поля\r\n      записываем их в виде массива массивов\r\n      запукаем цикл, где\r\n      пееменная row - новый строчный массив, который заполняется пустыми элементами из INDICATORS\r\n      массив - строка добавляется в общий массив\r\n     */\r\n    this.coordinates = [];\r\n    for (let i = 0; i < height; i++) {\r\n      const row = new Array(width).fill(INDICATORS.empty);\r\n      this.coordinates.push(row);\r\n    }\r\n  }\r\n  addMountains(width, height) {\r\n    /* \r\n    метод создания гор в случайном количестве, но не больше суммы длинны и ширины поля * 2\r\n    принимает длинну и ширину поля\r\n    в цикле создается item горы, которой добавляются координаты и hp\r\n    по координатам каждого item-a на поле создается элемент из INDICATORS\r\n    item добавляется в массив mountains\r\n    */\r\n    const mountCount = Math.round((Math.random() * width) + (Math.random() * height)) * 2;\r\n    for (let i = 0; i < mountCount; i++) {\r\n      const x = Math.floor(Math.random() * width)\r\n      const y = Math.floor(Math.random() * height)\r\n      const item = {\r\n        coordinates: { x, y },\r\n        hp: 3,\r\n      }\r\n      this.coordinates[y][x] = INDICATORS.mount;\r\n      this.mountains.push(item);\r\n    }\r\n  }\r\n  addPlayer(tank, coordinates) {\r\n    /* \r\n      метод создания игрока \r\n      принимает танк и координаты для его расстановки\r\n      создаем item - объект, внутри которого танк, координаты и id (номер в массиве tanks)\r\n      первая проверка: если танков в массиве больше, чем клеток - ошибка\r\n      вторая проверка: если на передаваемых координатах есть танк - ошибка\r\n      добавляем созданный item в массив tanks\r\n      вызываем метод обновления поля координат\r\n      возващаем item\r\n    */\r\n    const item = {\r\n      tank: tank,\r\n      coordinates: coordinates,\r\n      id: this.tanks.length,\r\n    }\r\n    if (this.tanks.length >= this.coordinates[0].length * this.coordinates.length) return 'error';\r\n\r\n    if (this.isTankOnCoord(item.coordinates.x, item.coordinates.y)) return 'error';\r\n\r\n    this.tanks.push(item);\r\n    this.updateBattlefieldCoordinates(item.coordinates, item.coordinates, INDICATORS.tank);\r\n    return item;\r\n  }\r\n  isTankOnCoord(x, y) {\r\n    /* \r\n      метод проверки наличия танка на передаваемых координатах\r\n      переменная ready - boolean.\r\n      цикл перебора танков в массиве tanks\r\n      условие: если координаты танка совпадают с переданными, вернуть true\r\n      цикл перебора гор в массиве mountains\r\n      условие: если координаты горы совпадают с переданными, отнимаем у горы HP \r\n      если у горы HP <= 0, вызываем метод разушения горы\r\n      переменная ready = false\r\n      если HP больше, ready = true\r\n    */\r\n    let ready = false;\r\n    for (let tank of this.tanks) {\r\n      if (tank.coordinates.x === x && tank.coordinates.y === y) ready = true;\r\n    }\r\n    for (let mount of this.mountains) {\r\n      if (mount.coordinates.x === x && mount.coordinates.y === y) {\r\n        mount.hp--;\r\n        if (mount.hp <= 0) {\r\n          this.destroyMount(mount);\r\n          ready = false;\r\n        }\r\n        else {\r\n          ready = true;\r\n        }\r\n      }\r\n    }\r\n    return ready;\r\n  }\r\n  setTankPosition(id, coordinates) {\r\n    /* \r\n      метод установки танка на позицию\r\n      принимает id из массива танков и координаты для перемещенеия\r\n      если танк неопределен - ошибка\r\n      если на передаваемых координатах есть другой танк - ошибка\r\n      если координаты невалидные - ошибка\r\n      заменяем меняем значки клетки и танка местами\r\n      иначе обновляем координаты танка \r\n    */\r\n    let tank = this.tanks[id];\r\n    if (tank === undefined) return 'error';\r\n    if (this.isTankOnCoord(coordinates.x, coordinates.y)) return 'error';\r\n    if (this.isPointOnArea(coordinates.x, coordinates.y) !== true) return 'error';\r\n    this.updateBattlefieldCoordinates(tank.coordinates, coordinates, INDICATORS.tank);\r\n    this.tanks[id].coordinates = coordinates;\r\n    return tank;\r\n  }\r\n  isPointOnArea(x, y) {\r\n    /* \r\n      проверка на выход за пределы поля\r\n      возвращает boolean\r\n    */\r\n    if (x < 0 || y < 0) {\r\n      return false;\r\n    }\r\n    if (x > this.coordinates[0].length - 1) {\r\n      return false;\r\n    }\r\n    if (y > this.coordinates.length - 1) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  updateBattlefieldCoordinates(oldCoordinates, newCoordinates, indicator) {\r\n    /* \r\n      замена значка клетки на значок сущности\r\n      меняем по координатам сущность на пустую клетку\r\n      меняем пустую клетку на сущность\r\n    */\r\n    this.coordinates[oldCoordinates.y][oldCoordinates.x] = INDICATORS.empty;\r\n    this.coordinates[newCoordinates.y][newCoordinates.x] = indicator;\r\n  }\r\n  destroyMount(item) {\r\n    /* \r\n      меняем значок горы на пустую клетку\r\n    */\r\n    this.coordinates[item.coordinates.y][item.coordinates.x] = INDICATORS.empty;\r\n    this.mountains = this.mountains.filter((item) => {\r\n      // if (item.hp < 1) return false;\r\n      //   return true;\r\n      return item.hp > 1;\r\n    })\r\n  }\r\n  addBullet(coordinates) {\r\n    /*\r\n      метод добавления пули\r\n      создаем объект пули,\r\n      с координатами и наносимым уроном \r\n      координаты пули - координата танка, смещенная на одну клетку, в сторону направления танка\r\n     */\r\n    const bullet = {\r\n      coordinates: this.changeBulletCoordinates(coordinates),\r\n      damage: 15,\r\n    }\r\n    this.bullets.push(bullet);\r\n  }\r\n  changeBulletCoordinates(coordinates) {\r\n    /* \r\n      выбор начаьных координат пули\r\n      если напрвление танка ****, координаты в сторону направления на 1 клетку\r\n    */\r\n    switch (coordinates.direction) {\r\n      case 'top': {\r\n        return { y: coordinates.y, x: coordinates.x - 1, direction: coordinates.direction }\r\n      }\r\n      case \"down\": {\r\n        return { y: coordinates.y, x: coordinates.x + 1, direction: coordinates.direction }\r\n      }\r\n      case \"left\": {\r\n        return { x: coordinates.x, y: coordinates.y - 1, direction: coordinates.direction }\r\n      }\r\n      case \"right\": {\r\n        return { x: coordinates.x, y: coordinates.y + 1, direction: coordinates.direction }\r\n      }\r\n  }\r\n  }\r\n  updateBulletPosition() {\r\n    /* \r\n      обновление позиции пули\r\n      цикл по всем пулям в массиве\r\n      старые координаты заменить на новые коодинаты через метод changeBulletCoordinates\r\n      обновить координаты у пули через обновление координат updateBattlefieldCoordinates\r\n    */\r\n    for (let i = 0; i < this.bullets.length; i++) {\r\n      const bullet = this.bullets[i];\r\n      const oldCoordinates = {\r\n        x: bullet.coordinates.x,\r\n        y: bullet.coordinates.y,\r\n      }\r\n      bullet.coordinates = this.changeBulletCoordinates(bullet.coordinates);\r\n      this.updateBattlefieldCoordinates(oldCoordinates, bullet.coordinates, INDICATORS.bullet)\r\n    }\r\n    console.log(this.bullets)\r\n  }\r\n}","export class BattlefieldViews {\r\n    init(coordinates) {                                                                         //графическое отображение в браузере\r\n        if (document.querySelector('.container') !== null) return; \r\n        this.coordinates = coordinates;                                                         //записываем передаваемые координаты в this\r\n        let rootDiv = document.createElement('div');                                            //создаем див-контейнер\r\n                                                       //отображение flex\r\n        rootDiv.classList.add('container');                                                     //добавляем класс контейнеру\r\n        for (let y = 0; y < coordinates.length; y++) {                                          //цикл от 0 до количества вложенных массивов в родительском массиве координат ;y++\r\n            let row = coordinates[y];                                                           //присваиваем переменной текущий массив (строка - у)\r\n            let rowDiv = document.createElement('div');                                         //создаем новый див (строку y)\r\n            rowDiv.classList.add('row')\r\n            for (let x = 0; x < row.length; x++) {                                              //запускаем цикл пока у = длинне строки координат\r\n                let section = this.createSection(row[y], y, x);                                 //создаем ячейку с помощью метода createSection\r\n                rowDiv.appendChild(section);                                                    //добавлям ячейку в строку\r\n            }\r\n            rootDiv.appendChild(rowDiv);                                                        //добавляем строку в контейнер\r\n        }\r\n        document.body.appendChild(rootDiv);                                                     //добавляем контейнер на страницу\r\n    }\r\n    update(coordinates) {                                                                       //метод обновления координат\r\n        this.coordinates = coordinates;                                                         //записываем передаваемые координаты в this\r\n        for (let y = 0; y < coordinates.length; y++) {                                          //цикл перебора вложенных массивов в родительском массиве\r\n            let row = coordinates[y];                                                           //присваиваем переменной текущий массив (строка - у)\r\n            for (let x = 0; x < row.length; x++) {                                              //перебираем каждый вложенный массив координат\r\n                document.querySelector(`[data-y=\"${x}\"][data-x=\"${y}\"]`).dataset.type = row[x];  //выбираем элемент документа по дата-атрибутам и присваеваем ему текст-контент соответствующего элемента\r\n            }\r\n        }\r\n    }\r\n    createSection(content, x, y) {                                                              //метод ссоздания элементов //принимает контент для отрисовки и координаты элемента\r\n        let section = document.createElement('div');                                            //создаем элемент и записываем его в переменную\r\n        section.classList.add('cell')\r\n        section.dataset.type = content;                                                          //добавляем ему контент в соответтвии с элементом массива\r\n        section.dataset.x = x;                                                                  //добавляем дата-атрибуты каждому элементу\r\n        section.dataset.y = y;\r\n        return section;                                                                         //возвращаем готовый див\r\n    }\r\n    updateTankPosition (coordinates, playerId, direction) {\r\n        const id$ = document.getElementById(playerId)\r\n        if (id$) {\r\n            id$.removeAttribute('id');\r\n            id$.classList.remove('left', 'right', 'top', 'down');\r\n        }\r\n        const tank$ = document.querySelector(`[data-y=\"${coordinates.x}\"][data-x=\"${coordinates.y}\"]`);\r\n        tank$.id = playerId;\r\n        tank$.classList.add(direction);\r\n        // console.log(document.querySelector(`[data-y=\"${coordinates.x}\"][data-x=\"${coordinates.y}\"]`))\r\n    }\r\n}","export function throttle(callback, time) {\r\n    /*  функция throttle, в которую передаем необходимую функцию и время, через которое можно выполнить ее снова \r\n        переменная isOpen - boolean (можно ли выполнять функцию) - по-умолчанию true\r\n        возвращаем функцию,\r\n        в которой если isOpen = true, запускаем функцию setTimeout,\r\n        запрещаем очередное выполнение функции, пока не кончится таймер\r\n        по окончании времени time разрешаем выполнение функции\r\n        выпоняем функцию\r\n    */\r\n    let isOpen = true;\r\n    return function () {\r\n        if (isOpen) {\r\n            setTimeout(function () {\r\n                isOpen = true;\r\n            }, time)\r\n            isOpen = false;\r\n            // callback();\r\n            callback.apply(this, arguments)\r\n        }\r\n    }\r\n}\r\n\r\nexport function debounce(callback, time) {\r\n    /*  функция debounce, в которую передаем необходимую функцию и время, через которое она выполнится\r\n        timer - время выполнения\r\n        возвращаем функцию, которая сбраывает таймер при вызове\r\n        очищаем таймер\r\n        вызываем таймаут, через который можно выполнить передаваемую функцию\r\n    */\r\n    let timer = null;\r\n    return function () {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(() => {\r\n            callback.apply(this, arguments)\r\n        }, time);\r\n\r\n    }\r\n}\r\n\r\n\r\n// const logZaloopa = debounce(() => {\r\n//     console.log ('123');\r\n// }, 300)\r\n\r\n// document.addEventListener('click', logZaloopa)\r\n\r\n\r\n\r\n// class Malenkii {\r\n//     constructor (){\r\n//         this.asdfds = debounce(this.asdfds, 500)\r\n//     }\r\n//     asdfds() {\r\n//         console.log (this)\r\n//     }\r\n// }\r\n// const malenkii = new Malenkii;\r\n// malenkii.asdfds();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function addEventListener(callback, args) {\r\n//     callback(args)\r\n// };\r\n// addEventListener(function (e){\r\n//     console.log(e);\r\n// }, 'rarar')","import { BattlefieldViews } from \"../views/BattlefieldView\";\r\nimport { throttle } from \"../utils/helpers\";\r\n\r\n\r\nexport class BattlefieldController {\r\n    constructor(battlefield, tank, config) {                                                  //в класс контроллера пеедаем поле боя (battlefield), танк (tank), параметры танка (config)\r\n        /* \r\n            класс для управления танком\r\n            принимает поле боя, танк и его параметры\r\n            при создании контроллера записываем в него передаваемое поле боя, танк и параметры\r\n            записываем танк в контроллер\r\n            \r\n        */\r\n        this.battlefield = battlefield;\r\n        this.tank = tank;\r\n        this.config = config;\r\n        this.onKeyDown = throttle(this.onKeyDown, 150)                                        //записываем функцию в this и передаем ее в функию trottle\r\n        this.initBattlefieldView();                                                           //вызываем метод построения макета\r\n        this.player = battlefield.addPlayer(tank, config);                                    //добавляем игрока и его координаты\r\n        console.log(this.player)\r\n        this.updatePlayer();                                                                  //вызываем метод обновления игроков\r\n        this.updateTankPosition(config.direction)\r\n        this.eventListener();                                                                 //вызываем слушатель событий\r\n    }\r\n    initBattlefieldView() {                                                                   //визуализируем поле боя\r\n        this.battlefieldView = new BattlefieldViews;                                          //создаем инстанс класса отрисовки\r\n        this.battlefieldView.init(this.battlefield.coordinates)                               //создаем поле боя по передаваемым координатам          \r\n    }\r\n    updatePlayer() {                                                                          //метод для переотрисовки поля\r\n        this.battlefieldView.update(this.battlefield.coordinates);\r\n    }\r\n    onKeyDown(e) {                                                                            //функция-событие\r\n        // console.log(this);                                                                    //выводим контекст в консоль\r\n        // console.log(e.code);                                                                  //выводим в консоль нажатую клавишу\r\n        if (e.code === this.config.control.UP) {                                              //если нажатая клавиша === *** \r\n            this.moveTop();                                                                   //вызываем метод движения\r\n            this.updatePlayer();                                                              //перерисовываем поле\r\n        }\r\n        if (e.code === this.config.control.DOWN) {\r\n            this.moveDown();\r\n            this.updatePlayer();\r\n        }\r\n        if (e.code === this.config.control.LEFT) {\r\n            this.moveLeft();\r\n            this.updatePlayer();\r\n        }\r\n        if (e.code === this.config.control.RIGHT) {\r\n            this.moveRight();\r\n            this.updatePlayer();\r\n        }\r\n        if (e.code === this.config.control.FIRE) {\r\n            this.fire();\r\n        }\r\n    }\r\n    eventListener() {                                                                         //слушатель событий\r\n        document.addEventListener('keydown', (e) => this.onKeyDown(e))                        //вызываем слушатель и выполняем функцию-событие при нажатии\r\n    }\r\n    updateConfig(result) {                                                                    //обновление параметров танка //принимает координаты или ошибку\r\n        if (result !== 'error') {                                                             //если пришедший результат не равен ошибке\r\n            this.config.x = result.coordinates.x;                                             //заменить координаты танка на пришедшие координаты из result\r\n            this.config.y = result.coordinates.y;\r\n        }\r\n    }\r\n    moveTop() {                                                                               //метод движения танка\r\n        const { x, y } = this.config;                                                         //записываем в объект текущие параметры\r\n        const result = this.battlefield.setTankPosition(this.player.id, { y, x: x - 1 });     //вызываем метод для установки танка на позицию, отличную на 1 яечйку по каждому клику записываем в result\r\n        this.updateConfig(result);                                                            //передаем result для обновления параметров\r\n        this.updateTankPosition('top');\r\n    }\r\n    moveDown() {\r\n        const { y, x } = this.config;\r\n        const result = this.battlefield.setTankPosition(this.player.id, { y, x: x + 1 });\r\n        this.updateConfig(result);\r\n        this.updateTankPosition('down');\r\n    }\r\n    moveLeft() {\r\n        const { y, x } = this.config;\r\n        const result = this.battlefield.setTankPosition(this.player.id, { y: y - 1, x });\r\n        this.updateConfig(result);\r\n        this.updateTankPosition('left');\r\n    }\r\n    moveRight() {\r\n        const { y, x } = this.config;\r\n        const result = this.battlefield.setTankPosition(this.player.id, { y: y + 1, x });\r\n        this.updateConfig(result);\r\n        this.updateTankPosition('right');\r\n    }\r\n    updateTankPosition(direction) {\r\n        this.player.coordinates.direction = direction;\r\n        this.battlefieldView.updateTankPosition(this.player.coordinates, this.player.id, direction)\r\n\r\n    }\r\n    fire () {\r\n        this.battlefield.addBullet(this.player.coordinates)\r\n        \r\n    }\r\n}","export class Server {\n  // Returns a Promise with width and height values number[];\n  // Or error;\n  requestFieldSize () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const x = 8 + Math.ceil((Math.random() * 16));\n        const y = x;\n        if (Math.random() >= 0)\n          resolve({x: x, y: y});\n        else\n          reject('SLOMANO')\n      }, Math.random() * 1500);\n    })\n  }\n\n  // Returns a Promise with players coordinates { x: number, y: number };\n  // Or error;\n  async requestSecondPlayerPosition () {\n    await this.#yobaPromise();\n    return { x: 0, y: 3 };\n  }\n\n  // Returns a Promise with boolean\n  async requestAllowingToPlay () {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n         resolve(Math.random() > 0.5);\n      }, Math.random() * 3000);\n    })\n  }\n\n  #yobaPromise () {\n    return new Promise((resolve => {\n      setTimeout(() => {\n        resolve();\n      }, Math.random() * 3000);\n    }))\n  }\n}\n","import { Server } from \"./Server\";\r\n\r\nexport class Connection {\r\n    constructor () {\r\n        // this.fn = fn;\r\n        this.serverConnect = new Server;\r\n    }\r\n    whatIsThisSize () {\r\n        return this.serverConnect.requestFieldSize();\r\n    }\r\n    isReadyPlayer () {\r\n        \r\n    }\r\n    \r\n}\r\n","import { Tank } from \"./Tank\";\nimport { Battlefield } from \"./Battlefield\";\nimport { BattlefieldController } from \"./Controllers/BattlefieldController\";\nimport { Connection } from \"./server/Connection\";\nimport \"./utils/helpers.js\"\nimport \"./styles/styles.scss\"\nimport { BattlefieldViews } from \"./views/BattlefieldView\";\nconst tank1 = new Tank('tank_1');\nconst tank2 = new Tank('tank_2');\n\nconst connection = new Connection();\nconst areaSize = connection.whatIsThisSize();\nconsole.log(areaSize);\n\nareaSize.then(function(size){\n    let _size = size;\n    console.log(size);\n    let positionY = Math.floor(_size.y/2);\n    let positionX_1 = 0;\n    let positionX_2 = _size.x-1;\n    console.log('Area Ready');\n    const battlefield = new Battlefield(_size.y, _size.x);\n    new BattlefieldController(battlefield, tank1, { y: positionY, x: positionX_1, control: controls1, direction: 'down'})\n    new BattlefieldController(battlefield, tank2, { y: positionY, x: positionX_2, control: controls2, direction: 'top'})\n    const battlefieldViews = new BattlefieldViews\n    setInterval(() => {\n        battlefieldViews.update(battlefield.coordinates)\n    }, 150)\n    \n})\n.catch(function(e){\n    console.error('Area Error');\n    console.log(e);\n})\n\n\nconst controls1 = {\n    UP: 'KeyW',\n    DOWN: 'KeyS',\n    LEFT: 'KeyA',\n    RIGHT: 'KeyD',\n    FIRE: 'Space',\n};\nconst controls2 = {\n    UP: 'ArrowUp',\n    DOWN: 'ArrowDown',\n    LEFT: 'ArrowLeft',\n    RIGHT: 'ArrowRight',\n    FIRE: 'Enter',\n};\n\n\n\n// fetch('/server/Server.js')\n//     .then((data) => {\n//         console.log(data);\n//     })\n\n\n\n\n\n// console.log(tank1.healh)\n// console.log(tank2.fire)\n\n// function battle (tank1 , tank2) {\n//     let count_1 = tank1.bullets;\n//     let count_2 = tank2.bullets;\n//     let tank1HP = tank1.healh;\n//     let tank2HP = tank2.healh;\n//     for (; count_1 > 0|| count_2 > 0; count_1--, count_2--)  {\n//         console.log(`Танк 1 делает выстрел! Осталось снарядов: ${count_1}`)\n//         tank2HP -= tank1.fire;\n//         if (tank2HP <= 0){\n//             console.log('У Танка 2 не оталось HP! Победил Танк 1!');\n//             break;\n//         } \n//         console.log(`У танка 2 остается ${tank2HP}HP`)\n//         console.log(`Танк 2 делает выстрел! Осталось снарядов: ${count_2}`)\n//         tank1HP -= tank2.fire;\n//         if (tank1HP <= 0){\n//             console.log('У Танка 1 не оталось HP! Победил Танк 2!');\n//             break;\n//         }\n//         console.log(`У танка 1 остается ${tank1HP}HP`);\n//     }\n\n// }\n\n// battle(tank1, tank2);\n\n/* import { BattlefieldViews } from \"../views/BattlefieldView\";\n\nexport class BattlefieldController {\n\n    constructor(battlefield, tank, config) {\n        this.battlefield = battlefield;\n        this.tank = tank;\n        this.config = config;\n        this.initBattlefieldView();\n        this.player = battlefield.addPlayer(tank, config);\n        this.updatePlayer();\n        this.eventListener();\n    }\n    initBattlefieldView() {\n        this.battlefieldView = new BattlefieldViews;\n        this.battlefieldView.init(this.battlefield.coordinates)\n    }\n    updatePlayer() {\n        this.battlefieldView.update(this.battlefield.coordinates);\n    }\n    eventListener() {\n        document.addEventListener('keydown', (e) => {\n            if (e.code === 'ArrowUp') {\n                this.moveTop();\n                this.updatePlayer();\n            }\n            if (e.code === 'ArrowDown') {\n                this.moveDown();\n                this.updatePlayer();\n            }\n            if (e.code === 'ArrowLeft') {\n                this.moveLeft();\n                this.updatePlayer();\n            }\n            if (e.code === 'ArrowRight') {\n                this.moveRight();\n                this.updatePlayer();\n            }\n        })\n    }\n    updateConfig(result) {\n        if (result !== 'error') {\n            this.config.x = result.coordinates.x;\n            this.config.y = result.coordinates.y;\n        }\n    }\n    moveTop() {\n        const { x, y } = this.config;\n        const result = this.battlefield.setTankPosition(this.player.id, { x, y: y - 1 });\n        this.updateConfig(result);\n    }\n    moveDown() {\n        const { x, y } = this.config;\n        const result = this.battlefield.setTankPosition(this.player.id, { x, y: y + 1 });\n        this.updateConfig(result);\n    }\n    moveLeft() {\n        const { x, y } = this.config;\n        const result = this.battlefield.setTankPosition(this.player.id, { x: x - 1, y });\n        this.updateConfig(result);\n    }\n    moveRight() {\n        const { x, y } = this.config;\n        const result = this.battlefield.setTankPosition(this.player.id, { x: x + 1, y });\n        this.updateConfig(result);\n    }\n}\n */"],"sourceRoot":""}